#!/usr/bin/env python3
"""
Test del Flujo Completo AVANZA
Prueba el flujo: WhatsApp ‚Üí IA convence ‚Üí Llamada ‚Üí Documentos ‚Üí Email
"""

import requests
import json
import time
import pandas as pd
from io import BytesIO

# Configuraci√≥n
BASE_URL = "http://localhost:4000"
TEST_NUMBER = "+573014146715"  # N√∫mero de prueba
TEST_NAME = "Juan P√©rez"

def test_flujo_completo():
    """Prueba el flujo completo de AVANZA"""
    
    print("üöÄ Iniciando prueba del flujo completo AVANZA...")
    
    # 1. Crear archivo Excel de prueba
    print("\nüìä 1. Creando archivo Excel de prueba...")
    test_data = {
        'numero': [TEST_NUMBER],
        'nombre': [TEST_NAME]
    }
    df = pd.DataFrame(test_data)
    
    # Guardar archivo temporal
    excel_file = "test_contacts.xlsx"
    df.to_excel(excel_file, index=False)
    
    # 2. Enviar contactos (WhatsApp + Llamada)
    print("\nüì± 2. Enviando mensaje inicial por WhatsApp...")
    with open(excel_file, 'rb') as f:
        files = {'file': ('test_contacts.xlsx', f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
        response = requests.post(f"{BASE_URL}/sendNumbers", files=files)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Contactos enviados: {result.get('valid_contacts', 0)}")
        print(f"üìã Resultados: {result.get('results', [])}")
    else:
        print(f"‚ùå Error enviando contactos: {response.text}")
        return False
    
    # 3. Simular respuesta "NO" del usuario
    print("\nü§ñ 3. Simulando respuesta 'NO' del usuario...")
    test_message = {
        "user_message": "No me interesa",
        "user_number": TEST_NUMBER,
        "user_name": TEST_NAME
    }
    
    # Simular webhook de WhatsApp
    webhook_data = {
        "entry": [{
            "changes": [{
                "value": {
                    "messages": [{
                        "from": TEST_NUMBER,
                        "text": {"body": "No me interesa"},
                        "type": "text"
                    }]
                }
            }]
        }]
    }
    
    response = requests.post(f"{BASE_URL}/whatsapp/business/webhook", json=webhook_data)
    if response.status_code == 200:
        print("‚úÖ Respuesta 'NO' procesada - IA deber√≠a estar convenciendo")
    else:
        print(f"‚ùå Error procesando respuesta: {response.text}")
    
    # 4. Simular cambio de opini√≥n
    print("\nüîÑ 4. Simulando cambio de opini√≥n...")
    webhook_data["entry"][0]["changes"][0]["value"]["messages"][0]["text"]["body"] = "S√≠, me interesa"
    
    response = requests.post(f"{BASE_URL}/whatsapp/business/webhook", json=webhook_data)
    if response.status_code == 200:
        print("‚úÖ Cambio de opini√≥n procesado - Llamada deber√≠a estar programada")
    else:
        print(f"‚ùå Error procesando cambio de opini√≥n: {response.text}")
    
    # 5. Verificar estado de conversaci√≥n
    print("\nüìä 5. Verificando estado de conversaci√≥n...")
    response = requests.get(f"{BASE_URL}/conversations/status")
    if response.status_code == 200:
        conversations = response.json()
        for conv in conversations.get('conversations', []):
            if conv['number'] == TEST_NUMBER:
                print(f"‚úÖ Estado actual: {conv['stage']}")
                print(f"üìû Llamada programada: {conv.get('call_sid', 'No')}")
                break
    else:
        print(f"‚ùå Error obteniendo estado: {response.text}")
    
    # 6. Simular finalizaci√≥n de llamada
    print("\nüìû 6. Simulando finalizaci√≥n de llamada...")
    call_ended_data = {
        "CallSid": "test_call_sid",
        "From": TEST_NUMBER,
        "CallDuration": "300"  # 5 minutos
    }
    
    response = requests.post(f"{BASE_URL}/twilio/voice/call_ended", data=call_ended_data)
    if response.status_code == 200:
        print("‚úÖ Llamada finalizada - An√°lisis completado")
    else:
        print(f"‚ùå Error finalizando llamada: {response.text}")
    
    # 7. Simular inter√©s post-llamada
    print("\nüéØ 7. Simulando inter√©s post-llamada...")
    webhook_data["entry"][0]["changes"][0]["value"]["messages"][0]["text"]["body"] = "S√≠, quiero proceder"
    
    response = requests.post(f"{BASE_URL}/whatsapp/business/webhook", json=webhook_data)
    if response.status_code == 200:
        print("‚úÖ Inter√©s confirmado - Solicitud de documentos enviada")
    else:
        print(f"‚ùå Error procesando inter√©s: {response.text}")
    
    # 8. Simular env√≠o de documentos
    print("\nüìÑ 8. Simulando env√≠o de documentos...")
    documents_data = {
        "from": TEST_NUMBER,
        "cedula_name": "Juan P√©rez",
        "recibo_name": "Juan P√©rez",
        "email": "juan.perez@test.com"
    }
    
    response = requests.post(f"{BASE_URL}/whatsapp/documents", data=documents_data)
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Documentos procesados: {result.get('names_match', False)}")
        print(f"üìß Email enviado: {result.get('whatsapp_sent', False)}")
    else:
        print(f"‚ùå Error procesando documentos: {response.text}")
    
    # 9. Verificar estado final
    print("\nüìä 9. Verificando estado final...")
    response = requests.get(f"{BASE_URL}/conversations/status")
    if response.status_code == 200:
        conversations = response.json()
        for conv in conversations.get('conversations', []):
            if conv['number'] == TEST_NUMBER:
                print(f"‚úÖ Estado final: {conv['stage']}")
                print(f"üìã An√°lisis listo: {conv.get('analysis_ready', False)}")
                break
    
    # Limpiar archivo temporal
    import os
    if os.path.exists(excel_file):
        os.remove(excel_file)
    
    print("\nüéâ ¬°Prueba del flujo completo completada!")
    return True

def test_whatsapp_only():
    """Prueba solo env√≠o de WhatsApp"""
    print("\nüì± Probando env√≠o solo WhatsApp...")
    
    # Crear archivo Excel
    test_data = {
        'numero': [TEST_NUMBER],
        'nombre': [TEST_NAME]
    }
    df = pd.DataFrame(test_data)
    excel_file = "test_whatsapp_only.xlsx"
    df.to_excel(excel_file, index=False)
    
    # Enviar solo WhatsApp
    with open(excel_file, 'rb') as f:
        files = {'file': ('test_whatsapp_only.xlsx', f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
        response = requests.post(f"{BASE_URL}/sendWhatsAppOnly", files=files)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ WhatsApp enviado: {result.get('valid_contacts', 0)}")
    else:
        print(f"‚ùå Error enviando WhatsApp: {response.text}")
    
    # Limpiar
    import os
    if os.path.exists(excel_file):
        os.remove(excel_file)

def test_bulk_whatsapp():
    """Prueba env√≠o masivo de WhatsApp"""
    print("\nüì§ Probando env√≠o masivo WhatsApp...")
    
    # Crear archivo Excel con mensajes personalizados
    test_data = {
        'numero': [TEST_NUMBER, "+573014146716"],
        'mensaje': [
            "Hola Juan, ¬øc√≥mo est√°s? Te escribo de AVANZA.",
            "Hola Mar√≠a, ¬øc√≥mo est√°s? Te escribo de AVANZA."
        ],
        'nombre': ["Juan P√©rez", "Mar√≠a Garc√≠a"]
    }
    df = pd.DataFrame(test_data)
    excel_file = "test_bulk_whatsapp.xlsx"
    df.to_excel(excel_file, index=False)
    
    # Enviar masivo
    with open(excel_file, 'rb') as f:
        files = {'file': ('test_bulk_whatsapp.xlsx', f, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')}
        response = requests.post(f"{BASE_URL}/whatsapp/bulk_send", files=files)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ Mensajes enviados: {result.get('success_count', 0)}")
        print(f"‚ùå Errores: {result.get('error_count', 0)}")
    else:
        print(f"‚ùå Error env√≠o masivo: {response.text}")
    
    # Limpiar
    import os
    if os.path.exists(excel_file):
        os.remove(excel_file)

if __name__ == "__main__":
    print("üß™ Tests del Flujo Completo AVANZA")
    print("=" * 50)
    
    try:
        # Test 1: Flujo completo
        test_flujo_completo()
        
        # Test 2: Solo WhatsApp
        test_whatsapp_only()
        
        # Test 3: Env√≠o masivo
        test_bulk_whatsapp()
        
        print("\n‚úÖ Todos los tests completados exitosamente!")
        
    except Exception as e:
        print(f"\n‚ùå Error en tests: {e}")
        import traceback
        traceback.print_exc() 