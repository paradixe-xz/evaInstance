#!/bin/bash

echo "üöÄ Sistema ANA - Llamadas Directas con An√°lisis de IA"
echo "====================================================="

# Instala dependencias del sistema (ajusta seg√∫n tu distro)
echo "üì¶ Instalando dependencias del sistema..."
apt update
apt install -y python3 python3-pip python3-venv

# Instala ffmpeg si no est√° instalado
echo "üéµ Verificando instalaci√≥n de ffmpeg..."
if ! command -v ffmpeg &> /dev/null; then
  echo "ffmpeg no est√° instalado. Instalando..."
  apt-get install -y ffmpeg
else
  echo "ffmpeg ya est√° instalado."
fi

# Instala dependencias del sistema para TTS
echo "üé§ Instalando dependencias para TTS..."
apt-get install -y espeak espeak-data
apt-get install -y portaudio19-dev python3-pyaudio

# Crea entorno virtual si no existe
if [ ! -d "venv" ]; then
  echo "üêç Creando entorno virtual..."
  python3 -m venv venv
fi

# Activa entorno virtual
echo "üîß Activando entorno virtual..."
source venv/bin/activate

# Instala/actualiza dependencias
echo "üìö Instalando dependencias Python..."
pip install --upgrade pip
pip install --upgrade -r requirements.txt
pip install uvicorn watchdog python-dotenv

# Crear directorios necesarios para el nuevo sistema
echo "üìÅ Creando directorios del sistema..."
mkdir -p conversations
mkdir -p transcripts
mkdir -p analysis
mkdir -p audio

# Exporta variables de entorno desde .env si existe
if [ -f ".env" ]; then
  echo "‚öôÔ∏è Cargando variables de entorno desde .env..."
  export $(grep -v '^#' .env | xargs)
fi

# Verificar variables de entorno cr√≠ticas
echo "üîß Verificando configuraci√≥n..."
MISSING_VARS=()

if [ -z "$TWILIO_ACCOUNT_SID" ]; then
  echo "‚ö†Ô∏è  ADVERTENCIA: TWILIO_ACCOUNT_SID no est√° configurado"
  MISSING_VARS+=("TWILIO_ACCOUNT_SID")
fi

if [ -z "$TWILIO_AUTH_TOKEN" ]; then
  echo "‚ö†Ô∏è  ADVERTENCIA: TWILIO_AUTH_TOKEN no est√° configurado"
  MISSING_VARS+=("TWILIO_AUTH_TOKEN")
fi

if [ -z "$TWILIO_PHONE_NUMBER" ]; then
  echo "‚ö†Ô∏è  ADVERTENCIA: TWILIO_PHONE_NUMBER no est√° configurado"
  MISSING_VARS+=("TWILIO_PHONE_NUMBER")
fi

if [ -z "$ELEVENLABS_API_KEY" ]; then
  echo "‚ö†Ô∏è  ADVERTENCIA: ELEVENLABS_API_KEY no est√° configurado"
  MISSING_VARS+=("ELEVENLABS_API_KEY")
fi

# Verificar y actualizar el modelo ANA
echo "ü§ñ Verificando y actualizando modelo ANA..."
if [ -f "update_ana_phone_system.sh" ]; then
  echo "üîÑ Actualizando modelo ANA para llamadas telef√≥nicas..."
  chmod +x update_ana_phone_system.sh
  ./update_ana_phone_system.sh
  if [ $? -eq 0 ]; then
    echo "‚úÖ Modelo ANA actualizado exitosamente"
  else
    echo "‚ö†Ô∏è  Error actualizando modelo ANA, intentando crear b√°sico..."
    ollama create ana --from llama2
  fi
else
  echo "‚ö†Ô∏è  Script de actualizaci√≥n no encontrado, creando modelo b√°sico..."
  ollama create ana --from llama2
fi

# Funci√≥n para limpiar procesos al salir
cleanup() {
    echo ""
    echo "üõë Deteniendo todos los procesos..."
    kill $SERVER_PID $MONITOR_PID 2>/dev/null
    echo "‚úÖ Procesos detenidos"
    exit 0
}

# Capturar Ctrl+C
trap cleanup SIGINT

echo ""
echo "üéØ Sistema ANA - Llamadas Directas est√° configurado!"
echo "=================================================="
echo "üìã Funcionalidades:"
echo "   ‚Ä¢ Carga contactos con archivo Excel"
echo "   ‚Ä¢ Llamadas autom√°ticas inmediatas"
echo "   ‚Ä¢ Transcripci√≥n completa de conversaciones"
echo "   ‚Ä¢ An√°lisis autom√°tico con IA"
echo "   ‚Ä¢ Seguimiento humano inteligente"
echo ""
echo "üåê Servidor disponible en: http://localhost:4000"
echo "üìö Documentaci√≥n: https://9jtwxh1smksq25-4000.proxy.runpod.net/docs"
echo "üìä Estado: cat status.txt"
echo ""
echo "üìã Endpoints principales:"
echo "   POST /sendNumbers - Subir contactos y hacer llamadas"
echo "   GET  /conversations/status - Estado de conversaciones"
echo "   GET  /analysis/ready_for_human - Listos para seguimiento"
echo "   POST /analysis/mark_closed - Marcar como cerrado"
echo ""
echo "üß™ Para probar el sistema:"
echo "   python test_call_system.py"
echo ""
echo "üìñ Documentaci√≥n completa: README_SISTEMA_LLAMADAS.md"
echo ""
echo "‚èπÔ∏è  Presiona Ctrl+C para detener todo"
echo ""

# Iniciar monitor de estado en segundo plano
echo "üìä Iniciando monitor de estado..."
python3 status_monitor.py > /dev/null 2>&1

# Funci√≥n para el monitor que se ejecuta cada 30 segundos
monitor_loop() {
    while true; do
        python3 status_monitor.py > /dev/null 2>&1
        sleep 30
    done
}

# Iniciar monitor en segundo plano
monitor_loop &
MONITOR_PID=$!

echo "‚úÖ Monitor iniciado (PID: $MONITOR_PID)"

# Iniciar servidor principal
echo "üåê Iniciando servidor principal..."
uvicorn main:app --host 0.0.0.0 --port 4000 &
SERVER_PID=$!

echo "‚úÖ Servidor iniciado (PID: $SERVER_PID)"
echo ""

# Mostrar informaci√≥n de configuraci√≥n
if [ ${#MISSING_VARS[@]} -gt 0 ]; then
  echo "‚ö†Ô∏è  VARIABLES FALTANTES:"
  for var in "${MISSING_VARS[@]}"; do
    echo "   - $var"
  done
  echo ""
  echo "üí° Configura estas variables en tu archivo .env o en el entorno"
  echo "   Ejemplo: export $var=tu_valor"
  echo ""
fi

echo "üéâ Sistema ANA completamente operativo!"
echo "   ‚Ä¢ Llamadas directas autom√°ticas"
echo "   ‚Ä¢ Transcripci√≥n completa"
echo "   ‚Ä¢ An√°lisis inteligente de IA"
echo "   ‚Ä¢ Seguimiento humano optimizado"
echo ""

# Esperar a que termine cualquiera de los procesos
wait 